ऋत्विक दोशी। १ मार्च २०२२।

Dogfooding: Use our own product to do our work
 - If your firm makes accounting software, that's what the finance team uses
 - Goal is to give your developers a solid understanding of the customer experience

 --> A web-based app that conusmes its own API
 	- Used to refer just to libraries used internally
 	- now means interface to access external data
 	- Most web-based services have a public-facing API
 	--> progrmmableweb.com lists 15,000+ public APIs

 	• How can an internal API be used to draw a stringer line around the model componenent of a model-view-controller architecture?

 Architecture: all the work/data storage is done on the backend, frontend just displays the information

Implementing MVC via dogfooding provides important advantages over traditional client-server approaches

• Thin-client
	- Work is done at the back end
	- Back-end data sources (BEDS) are typically relational
	- Scripting includes templating engines (Smarty, etc)
 - LAMP-like architectures have been used since Day 1 on the web
 - Performance bottlenecks, including RDB, interpreter

 • MVC
 	- Database is the model
 	- Buttons and other actions on the web page are the controller
 	- Web page is the view
 - Fairly clean implementation of the pattern, and each component has well-defined roles

• Javascript
	- released to add functionality to previously static web pages
	- Direct access to the DOM allowed programmers to provide some interactivity to the page
	- Led to thick-client

• Thick-client
	- Most of the work done on the front end
	- However, JS compiled to machine language in the browser, which means that any actions taken by the front-end code are exposed
	- Security risk

• Breaking MVC: model is spread around
	- State is held in the page itself
	- Changes in state end up being initiated by view code
	- The lines between components can be blurry
	- Divergence from clean architecure bad

• Node.js
	- Server-side execution of Javascript released in 2010, meaning that JS can work on both front and back end
	- Serialization: JSON, becomes transport encoding of choice for moving data back and forth between front and back end
	- Store data in JSON using noSQL: mongoDB
	- Need to take asynchronicity into account
	- Brought about full-stack cohesion, very scalable platform

• REST: Calling the API
	- Representational State Transfer was described in 2000 by Roy Fielding in his PhD dissertation
	- It provides a simple way to map HTTP semantics onto CRUD data operations
	- DECOUPLING MECHANISM
	- Client interface is through a URL, client doesn't know details of requests
	- REST in wide use